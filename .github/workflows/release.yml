name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build binaries (${{ matrix.target }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          # - runner: ubuntu-22.04-arm
          #   target: aarch64-unknown-linux-gnu
          - runner: macos-13
            target: x86_64-apple-darwin
          - runner: macos-14
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          allow-prereleases: true

      - name: Set up uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "0.8.5"

      - name: Prepare building environment
        run: make prepare

      - name: Build standalone binary
        run: make build

      - name: Package artifact
        shell: bash
        env:
          TAG: ${{ github.ref_name }}
        run: |
          set -euxo pipefail
          mkdir -p artifacts
          # package the binary as tar.gz; keep filename with target and tag
          cp dist/kimi artifacts/kimi
          FILENAME="kimi-${TAG}-${{ matrix.target }}.tar.gz"
          tar -C artifacts -czf "artifacts/${FILENAME}" kimi
          rm -f artifacts/kimi
          echo "Built artifact: artifacts/${FILENAME}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        env:
          TAG: ${{ github.ref_name }}
        with:
          name: kimi-${TAG}-${{ matrix.target }}
          path: artifacts/*.tar.gz
          if-no-files-found: error
          retention-days: 7

  release:
    name: Publish GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloads
          merge-multiple: true

      - name: Show downloaded files
        run: ls -laR downloads

      - name: Generate per-file SHA256 sums
        shell: bash
        run: |
          set -euxo pipefail
          cd downloads
          for f in *.tar.gz; do
            sha256sum "$f" > "$f.sha256"
            echo "sha256($(basename "$f"))=$(cut -d' ' -f1 "$f.sha256")"
          done
          ls -la

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            downloads/*.tar.gz
            downloads/*.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
